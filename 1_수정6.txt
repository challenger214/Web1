#include <stdio.h>
#include <limits.h>
#include <malloc.h>

#define MAX_VERTICES 100
#define TRUE 1 
#define FALSE 0 


int distance[MAX_VERTICES];
int found[MAX_VERTICES];

int choose(int distance[], int n, int found[]) {
	int i, min, minpos;
	min = INT_MAX;
	minpos = -1;
	for (i = 0; i < n; i++)
		if (distance[i] < min && !found[i]) {
			min = distance[i];
			minpos = i;
		} return minpos;
}
void shortest_path(int start, int n, int **weight) {
	int i, u, w;
	for (i = 0; i < n; i++) {
		distance[i] = weight[start][i];
		found[i] = FALSE;
	}
	found[start] = TRUE;
	distance[start] = 0;
	u = choose(distance, n, found);
	found[u] = TRUE;
	for (w = 0; w < n; w++) {
		if (!found[w]) {
			if (distance[u] + weight[u][w] < distance[w]) {
				distance[w] = distance[u] + weight[u][w];
			}
		}
		printf("%d,  ", distance[w]);
	}printf(")\n");
}
/*

void dijk(int n, const int W, int F) {
	int i, vnear, min,e;  
	for (i = 2; i <= n; i++) { 
		touch[i] = 1;     
		length[i] = W[1][i]; 
	}  for(i=0 ;i<n;i++){   
		for (i = 2; i <= n; i++) 
			if (length[vnear] + W[vnear][i] < length[i]) { 
				length[i] = length[vnear] + W[vnear][i];    
				touch[i] = vnear; }     
		length[vnear] = -1; 
	}
	for (i = 2; i <= n; i++) {
		if (0 <= length[i] < min) {
			min = length[i];
			vnear = i;
		}
	}
}

void dijkstra(int n, int* W[], Edge F[])    // 다익스트라 알고리즘
{
	int i, vnear = 0;
	int min, num = 0;
	Edge e;
	for (i = 1; i < n; i++) {
		touch[i] = 0;         // 각 정점에 대해서, v1에서 출발하는
		length[i] = W[0][i];  // 현재 최단경로의 마지막 정점을 v1
	}                           // 으로 초기화한다.

	printf("여기까지는 정상\n");
	// 그 경로의 길이는 v1에서의 이음선
	// 상의 가중치로 초기화한다.
	while (num < n - 1) {            // n-1개의 정점을 Y에 추가한다.
		min = 99;
		for (i = 1; i < n; i++)    // 최단경로를 갖는지 각 정점을 점검
			if (length[i] >= 0 && length[i] < min) {
				min = length[i];
				vnear = i;
			}
		e.vertex[0] = touch[vnear];   // e = touch[vnear]가 인덱스인
		e.vertex[1] = vnear;      // 정점에서 vnear가 인덱스인
		e.cost = min;               // 정점으로 가는 이음선
		F[num] = e;                 // e를 F에 추가

		for (i = 1; i < n; i++)
			if (length[vnear] + W[vnear][i] < length[i]) {
				length[i] = length[vnear] + W[vnear][i];
				touch[i] = vnear;   // Y에 속하지 않는 각 정점에 대해서,
			}                       // 최단경로를 바꾼다.
		length[vnear] = -1;           // vnear가 인덱스인 정점을 Y에 추가
		num++;                      // repeat(n-1 times)를 위한 변수
	}
}*/
int(**adj_matrix(FILE* fp, int n)) {
	int** adj = malloc(sizeof(int**) * n); //2차원 배열 동적 할당 
	int start, end, weight; //시작 정점, 끝 정점, 가중치
	int flag = 0; //fscanf를 사용하기 위해 필요한 변수
	for (int i = 1; i <= n; i++) {
		adj[i] = (int*)malloc(sizeof(int*) * n);
		for (int j = 1; j <= n; j++) {
			if (flag == 0) {
				fscanf(fp, "%d %d %d\n", &start, &end, &weight);
				flag = 1;
			}
			if (i == j) {
				adj[i][j] = 0;
			}
			else {
				if (i == start && j == end) {
					adj[i][j] = weight;
					flag = 0;
				}
				else {
					adj[i][j] = 9999;
				}
			}
			printf("%d \t", adj[i][j]);
		}
		printf("\n");
	}return adj;
}
int main(void) {
	//1871049 장진희
	FILE* fp;
	fp = fopen("c:\\Users\\betty\\graph1.txt", "r");
	int num1 = 0, num2 = 0, start, end, weight,flag = 0; 
	
	fscanf(fp, "%d ", &num1);
	fscanf(fp, "%d ", &num2);
	printf("\n");
	int** adj = malloc(sizeof(int**) * num1); 
	for (int i = 1; i <= num1; i++) {
		adj[i] = (int*)malloc(sizeof(int*) * num1);
		for (int j = 1; j <= num1; j++) {
			if (flag == 0) {
				fscanf(fp, "%d %d %d\n", &start, &end, &weight);
				flag = 1;
			}
			if (i == j) {
				adj[i][j] = 0;
			}
			else {
				if (i == start && j == end) {
					adj[i][j] = weight;
					flag = 0;
				}
				else {
					adj[i][j] = 9999;
				}
			}
			printf("%d \t", adj[i][j]);
		}
		printf("\n");
	}
	shortest_path(1,num2,adj);

	return 0;
}
