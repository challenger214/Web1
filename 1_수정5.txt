#include <stdio.h>
#include <limits.h>

#define MAX_VERTICES 100
#define TRUE 1 
#define FALSE 0 

int distance[MAX_VERTICES];
int found[MAX_VERTICES];

typedef struct HTentry* HTpointer;
typedef struct HTentry {
	int index;
	int count;
	HTpointer next;  
} HTentry;

HTpointer HT[MAX_VERTICES];

void init(HTpointer point) {
	point->index = 0;
	point->count = 0;
	point->next = NULL;
}

int choose(int distance[], int n, int found[]) {
	int i, min, minpos;
	min = INT_MAX;
	minpos = -1;
	for (i = 0; i < n; i++)
		if (distance[i] < min && !found[i]) {
			min = distance[i];
			minpos = i;
		} return minpos;
}

void shortest_path(int start, int n, int weight[MAX_VERTICES][MAX_VERTICES]) {
	int i, u, w;
	for (i = 0; i < n; i++) {
		distance[i] = weight[start][i];
		found[i] = FALSE;
	}
	found[start] = TRUE;
	distance[start] = 0;
	u = choose(distance, n, found);
	found[u] = TRUE;
	for (w = 0; w < n; w++) {
		if (!found[w]) {
			if (distance[u] + weight[u][w] < distance[w]) {
				distance[w] = distance[u] + weight[u][w];
			}
		}
		printf("%d,  ", distance[w]);
	}printf(")\n");
}

void insert(int index, int count, int weight) {
	HTentry* entry = malloc(sizeof(HTentry));
	entry->index = weight;
	entry->count = count;
	entry->next = NULL;
	if (HT[index] == NULL) {
		HT[index] = entry;
	}else {
		HTentry* temp = malloc(sizeof(HTentry));
		temp = HT[index];
		while (temp->next != NULL) {
			temp = temp->next;
		}
		entry->next = HT[index];
		HT[index] = entry;
	}
}

void insert_node(HTpointer* phead, HTentry* p, HTentry* new_node) {
	if (*phead == NULL) { // 공백 리스트인 경우 
		new_node->next = NULL;
		*phead = new_node;
	}
	else if (p == NULL) { // p가 NULL이면 첫번째 노드로 삽입 
		new_node->next = *phead;
		*phead = new_node;
	}
	else { // p 다음에 삽입 
		new_node->next = p->next;
		p->next = new_node;
	}
}

HTentry* search(HTentry* head, int x) {
	HTentry* p; 
	p = head; 
	while (p != NULL) {
		if (p->count == x) 
			return p; // 탐색 성공 
		p = p->next; 
	} return p; // 탐색 실패일 경우 NULL 반환 
}

void fillin(int index, int num1) {
	HTentry* temp = malloc(sizeof(HTentry));
	HTentry* entry = malloc(sizeof(HTentry));
	HTentry * f = malloc(sizeof(HTentry));
	temp = HT[index];
	int flag = num1;
	for(int count = num1; count>0;count--){
		if (temp->count != count) {
			entry->index = 0;
			entry->count = count;
			f=search(HT[index], flag);
			if (f == NULL) {
				printf("비어있습니다.");
			}else {
				printf("%d\n", f->count);
			}
			entry->next = temp;
			f->next = entry;
			printf("여기까지는 정상\n");
			printf("%d %d\n", temp->count,count);
			temp = temp->next;
			flag = temp->count;
			count=flag-1;
		}
		else {
			printf("%d %d\n", temp->count,count);
			temp = temp->next;
			flag = count;
		}
	}
}

int main(void) {
	//1871049 장진희
	FILE* fp;
	fp = fopen("c:\\Users\\betty\\graph2.txt", "r");
	int num1 = 0, num2 = 0, n1, n2, n3, i = 0, j = 1, k = 1;

	fscanf(fp, "%d ", &num1);
	fscanf(fp, "%d ", &num2);
	printf("\n");

	while (1) {
		fscanf(fp, "%d ", &n1);
		fscanf(fp, "%d ", &n2);
		fscanf(fp, "%d ", &n3);
		insert(n1, n2, n3);
		i += 1;
		if (i == num2) {
			break;
		}
	}

	fillin(4, num1);
	for (int i = 1; i <= num1; i++) {
		HTentry* temp = malloc(sizeof(HTentry));
		temp = HT[i];
		if (temp->next == NULL) {
			printf("%d (%d)\t", HT[i]->index,HT[i]->count);
		}
		else {
			while (temp->next != NULL) {
				printf("%d (%d)\t", temp->index,temp->count);
				temp = temp->next;
			}printf("%d (%d)\t", temp->index, temp->count);
		}
		printf("\n");
	}
	return 0;
}